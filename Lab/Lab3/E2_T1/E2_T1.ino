/* 
Write a program that outputs a counter on the serial monitor.

The counter is initialized at 0 and is incremented by 1
for each clockwise increment of the rotary encoder.
Similarly, it is decremented by 1 for each counterclockwise increment.
The counter should be reset to 0 when the encoder is pressed down
like a button. 

Use an interrupt for the rotary encoder and do NOT use pinmode().
*/
#define CLK_PIN PD2
#define DT_PIN PD4
#define SW_PIN PD3

int counter = 0;

enum State {
  IDLE,
  TURNING
};

enum State state = IDLE;

void encoderISR() {
  switch (state) {
    case IDLE:
      if (PIND & (1 << DT_PIN)) {
        counter++;
      } else {
        counter--;
      }
      Serial.print("Counter: ");
      Serial.println(counter);
      state = TURNING;
      break;
    case TURNING:
      state = IDLE;
      break;
  }
}

void switchISR() {
  counter = 0;

  Serial.print("Reset Counter: ");
  Serial.println(counter);
}

void setup() {
  Serial.begin(9600);

  // Set Clock and DT pins as inputs.
  // Modified code generated by ChatGPT 4.0 LLM
  // with query "Use DDRD to set 3 pins as input on Arduino"
  DDRD &= ~((1 << CLK_PIN) | (1 << DT_PIN) | (1 << SW_PIN));  // Set PD2, PD3, PD4 as inputs
  // Set Switch pin as input and pull up resistor
  PORTD |= (1 << SW_PIN);

  // Interrupt on clock signal changes
  attachInterrupt(digitalPinToInterrupt(CLK_PIN), encoderISR, RISING);
  // Interrupt on button press, falling edge
  attachInterrupt(digitalPinToInterrupt(SW_PIN), switchISR, RISING);
  state = IDLE;
}


void loop() {
}